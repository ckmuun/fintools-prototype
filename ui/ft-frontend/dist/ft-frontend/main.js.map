{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/discovery/discovery.component.ts","./src/app/discovery/discovery.component.html","./src/app/entrypoint/entrypoint.component.ts","./src/app/entrypoint/entrypoint.component.html","./src/app/explanation-dialog/explanation-dialog.component.ts","./src/app/explanation-dialog/explanation-dialog.component.html","./src/app/feedback.service.ts","./src/app/findash/findash.component.ts","./src/app/findash/findash.component.html","./src/app/finish/finish.component.ts","./src/app/finish/finish.component.html","./src/app/ftconstants.ts","./src/app/generic-radarchart/generic-radarchart.component.ts","./src/app/generic-radarchart/generic-radarchart.component.html","./src/app/landingpage/landingpage.component.ts","./src/app/landingpage/landingpage.component.html","./src/app/next-page-dialog/next-page-dialog.component.ts","./src/app/next-page-dialog/next-page-dialog.component.html","./src/app/profiles.service.ts","./src/app/questionnaire.service.ts","./src/app/skillradar/skillradar.component.ts","./src/app/skillradar/skillradar.component.html","./src/app/strat-details/strat-details.component.html","./src/app/strat-details/strat-details.component.ts","./src/app/strat-feedback/strat-feedback.component.ts","./src/app/strat-feedback/strat-feedback.component.html","./src/app/stratcompare/stratcompare.component.ts","./src/app/stratcompare/stratcompare.component.html","./src/app/strategy.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {EntrypointComponent} from \"./entrypoint/entrypoint.component\";\nimport {LandingpageComponent} from \"./landingpage/landingpage.component\";\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  {path: 'get-started', component: EntrypointComponent},\n  {path: 'home', component: LandingpageComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ft-frontend';\n}\n","<mat-toolbar  class=\"toolbar mat-elevation-z2\" color=\"primary\">Fintools Prototype</mat-toolbar>\n<router-outlet></router-outlet>\n","import\n{NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {EntrypointComponent} from './entrypoint/entrypoint.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {FindashComponent} from \"./findash/findash.component\";\nimport {ChartsModule} from \"ng2-charts\";\nimport {SkillradarComponent} from './skillradar/skillradar.component';\nimport {MatGridListModule} from \"@angular/material/grid-list\";\nimport {StratcompareComponent} from './stratcompare/stratcompare.component';\nimport {StratDetailsComponent} from './strat-details/strat-details.component';\nimport {FlexLayoutModule} from \"@angular/flex-layout\";\nimport {StratFeedbackComponent} from './strat-feedback/strat-feedback.component';\nimport {NgxStarsModule} from \"ngx-stars\";\nimport {DiscoveryComponent} from './discovery/discovery.component';\nimport {LandingpageComponent} from './landingpage/landingpage.component';\nimport { GenericRadarchartComponent } from './generic-radarchart/generic-radarchart.component';\nimport { ExplanationDialogComponent } from './explanation-dialog/explanation-dialog.component';\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport { NextPageDialogComponent } from './next-page-dialog/next-page-dialog.component';\nimport { FinishComponent } from './finish/finish.component';\n\nconst routes: Routes = [\n  {path: '', component: LandingpageComponent},\n  {path: 'home', component: LandingpageComponent},\n  {path: 'get-started', component: EntrypointComponent},\n  {path: 'dashboard', component: FindashComponent},\n  {path: 'radar', component: SkillradarComponent},\n  {path: 'discover', component: DiscoveryComponent},\n  {path: 'finish', component: FinishComponent},\n];\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    EntrypointComponent,\n    FindashComponent,\n    SkillradarComponent,\n    StratcompareComponent,\n    StratDetailsComponent,\n    StratFeedbackComponent,\n    DiscoveryComponent,\n    LandingpageComponent,\n    GenericRadarchartComponent,\n    ExplanationDialogComponent,\n    NextPageDialogComponent,\n    FinishComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    RouterModule.forRoot(routes),\n    ChartsModule,\n    MatGridListModule,\n    FlexLayoutModule,\n    NgxStarsModule,\n    MatDialogModule\n  ],\n\n  exports: [RouterModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {FintoolRecomDto, ScoreContainer, StrategyComponent, StrategyService} from \"../strategy.service\";\nimport {ExplanationDialogComponent} from \"../explanation-dialog/explanation-dialog.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {NextPageDialogComponent} from \"../next-page-dialog/next-page-dialog.component\";\nimport {FeedbackService} from \"../feedback.service\";\n\n@Component({\n  selector: 'app-discovery',\n  templateUrl: './discovery.component.html',\n  styleUrls: ['./discovery.component.css']\n})\nexport class DiscoveryComponent implements OnInit {\n\n  constructor(private strategySvc: StrategyService, public dialog: MatDialog, private feedbackService: FeedbackService) {\n  }\n\n  // dirty initializer hack\n  data: FintoolRecomDto = {} as any\n\n  strats: StrategyComponent[] = [];\n  stratArrs: number[][] = [];\n\n  userScoreArr: number[] = []\n  feedback: number[] = [-1, -1, -1]\n  allRated: boolean = false;\n\n  ngOnInit(): void {\n\n\n    this.strategySvc.data$.subscribe(\n      resp => {\n        this.userScoreArr = this.getNumberArray(resp.user_scores)\n\n        this.data = resp\n        this.data.id = this.strategySvc.currentUserId\n        console.log(\"DEBUG OUTPUT\")\n        this.strats.forEach(\n          strat => {\n            console.log(\"strategy: \" + strat.name)\n            console.log(\"has scores: \" + this.getNumberArrayFromStrategy(strat));\n          });\n      }\n    )\n\n    this.strategySvc.getRandomStrategySample().subscribe(\n      resp => {\n        this.strats = resp;\n        this.extractStrategyScores(this.strats)\n      }\n    )\n    this.openDialog();\n  }\n\n  openNextPageDialog(): void {\n    this.dialog.open(NextPageDialogComponent, {\n      data: {\n        text: \"\",\n        redirectUri: \"/finish\"\n      }\n    })\n  }\n\n\n  // abusing array with two slots as a tuplem, 0 is the rating, 1 is the strategy index\n  collectFeedback(tuple: number[]) {\n    console.log(\"saving feedback\")\n    this.feedback[tuple[1]] = tuple[0];\n\n    console.log(\"strategy nr. \" + tuple[1] + \" got rating: \" + tuple[0]);\n\n    this.allRated = this.checkIfFeedbackComplete();\n\n    if (this.allRated) {\n      this.openNextPageDialog()\n    }\n\n  }\n\n  checkIfFeedbackComplete(): boolean {\n    for (let i = 0; i < this.feedback.length; i++) {\n      if (this.feedback[i] === -1) {\n        return false;\n      }\n    }\n    return true\n  }\n\n\n  openDialog() {\n    this.dialog.open(ExplanationDialogComponent, {\n      data: {\n        text: \"This page displays random strategies which were not explicitly selected for you. These serve as a contrast\" +\n          \"to the recommendations you just saw. \\n Please also rate these strategies.\"\n      }\n    });\n  }\n\n\n  extractStrategyScores(scs: StrategyComponent[]) {\n    scs.forEach(\n      strategy => {\n        this.stratArrs.push([strategy.time_flexibility, strategy.fin_risk_tolerance, strategy.psy_risk_tolerance, strategy.cog_bias_resistance, strategy.financial_knowledge])\n      }\n    )\n  }\n\n  /*\n    Based on: export const radarchartLabels: string[] = ['TimeFlexibility', 'Financial Risk Tolerance', 'Psychological Risk Tolerance', 'Cognitive Bias Resistance', 'Finance Knowledge'];\n   */\n  getNumberArray(sc: ScoreContainer): number[] {\n    return [sc.time_flexibility, sc.fin_risk_tolerance, sc.psy_risk_tolerance, sc.cog_bias_resistance, sc.financial_knowledge]\n  }\n\n  getNumberArrayFromStrategy(strat: StrategyComponent): number[] {\n\n    return [strat.time_flexibility, strat.fin_risk_tolerance, strat.psy_risk_tolerance, strat.cog_bias_resistance, strat.financial_knowledge]\n  }\n}\n","<div fxLayout=\"column\">\n\n  <div fxLayoutGap=\"32px\" style=\"margin-bottom: 35px\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>Displaying random strategies which were not explicitly selected for the user</mat-card-title>\n        <mat-card-subtitle>user id: {{this.data.id}}</mat-card-subtitle>\n      </mat-card-header>\n    </mat-card>\n  </div>\n  <div fxFlex=75>\n    <ul *ngFor=\"let strategy of this.strats; index as i\">\n\n      <!--<p> {{ this.data.good_recommendation.recommended_components[i].name}}</p>-->\n\n      <mat-card>\n        <div fxLayout.xl=\"row\" fxLayoutGap=\"32px\">\n          <app-stratcompare fxFlex=\"33\" [userScores]=\"userScoreArr\"\n                            [strategyScores]=\"this.stratArrs[i]\"></app-stratcompare>\n          <app-strat-details fxFlex=\"33\"\n                             [strategy]=\"this.strats[i]\"></app-strat-details>\n          <app-strat-feedback fxFlex=\"33\"\n                              [strategy]=\"this.strats[i]\"\n                              [strategyIndex]=\"i\"\n                              (stratRatedEmitter)=\"this.collectFeedback($event)\"\n          ></app-strat-feedback>\n        </div>\n      </mat-card>\n    </ul>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {McQuestionnaire, QuestionnaireService} from \"../questionnaire.service\";\nimport {StrategyService} from \"../strategy.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {ProfilesService} from \"../profiles.service\";\nimport {ExplanationDialogComponent} from \"../explanation-dialog/explanation-dialog.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {NextPageDialogComponent} from \"../next-page-dialog/next-page-dialog.component\";\n\n@Component({\n  selector: 'app-entrypoint',\n  templateUrl: './entrypoint.component.html',\n  styleUrls: ['./entrypoint.component.css']\n})\nexport class EntrypointComponent implements OnInit {\n\n\n  // ##### Domain and application imports #####\n  questionnaires: McQuestionnaire[];\n  showSubmitModal: boolean = false;\n\n  qCategories: string[];\n\n  constructor(private qSvc: QuestionnaireService,\n              private stratSvc: StrategyService,\n              private profilesSvc: ProfilesService,\n              private route: ActivatedRoute,\n              private router: Router,\n              public dialog: MatDialog) {\n    this.qCategories = [];\n    this.questionnaires = [];\n  }\n\n  getTitle(): string {\n    return \"Questionnaires:\"\n  }\n\n  getSelected(questionnaireIndex: number, questionIndex: number, answerIndex: number): boolean {\n    return this.questionnaires[questionnaireIndex]\n      .questions[questionIndex]\n      .chosen_answer_index === answerIndex;\n  }\n\n  ngOnInit(): void {\n    console.log(\"init entrypoint component\")\n    this.qSvc.getQuestionnaires().subscribe(\n      q => {\n        this.questionnaires = q\n      }\n    )\n\n    this.qSvc.getQuestionnaireList().subscribe(\n      categories => this.qCategories = categories\n    )\n    this.openDialog();\n\n  }\n\n  openDialog() {\n    this.dialog.open(ExplanationDialogComponent, {\n      data: {\n        text: \"This page displays various questions which we use to further narrow down recommendations for you.\" +\n          \"Please answer them correctly to optimize your results. You may be surprised at the 'non-financial' questions. \" +\n          \"This is on purpose and a major aspect of why this recommendation site is different from other, sales-driven ones.\"\n      }\n    });\n  }\n\n  openNextPageDialog(): void {\n    let matDialogRef = this.dialog.open(NextPageDialogComponent, {\n      data: {\n        text: \"\",\n        redirectUri: \"/dashboard\"\n      }\n    })\n\n    const sub = matDialogRef.componentInstance.buttonClicked.subscribe(\n      () => {\n        this.uploadFilledQuestionnaires();\n      }\n    )\n\n    matDialogRef.afterClosed().subscribe(\n      sub.unsubscribe\n    )\n\n  }\n\n  navigateToFindash() {\n    this.router.navigateByUrl('/dashboard')\n  }\n\n  uploadFilledQuestionnaires() {\n\n    return this.stratSvc.postFilledQuestionnaires(this.questionnaires, this.profilesSvc.chosenProfile).subscribe(\n      response => {\n        console.log(\"received upload response, routing to dashboard component\")\n        console.log(\"response:\" + response.id)\n        this.stratSvc.currentUserId = response.id\n        this.navigateToFindash()\n      }\n    )\n  }\n\n  setAnswerIndex(questionnaireIndex: number, questionIndex: number, answerIndex: number) {\n    console.log(\"setting chosen answer in questionnaire: \" + questionnaireIndex + \"\\n question: \" + questionIndex + \"\\n to answer at index: \" + answerIndex)\n\n    this.questionnaires[questionnaireIndex]\n      .questions[questionIndex]\n      .chosen_answer_index = answerIndex\n\n    if (this.allQuestionnairesFilled()) {\n      this.openNextPageDialog()\n    }\n  }\n\n  allQuestionnairesFilled(): boolean {\n    if (this.questionnaires.length === 0) {\n      return false;\n    }\n\n    for (let i = 0; i < this.questionnaires.length; i++) {\n      let q = this.questionnaires[i];\n      for (let ii = 0; ii < q.questions.length; ii++) {\n        let qq = q.questions[ii];\n\n        // -1 is the default index set by backend\n        if (qq.chosen_answer_index === -1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // DEBUG ONLY\n  fillQuestionnairesWithDefault() {\n    for (let i = 0; i < this.questionnaires.length; i++) {\n      let q = this.questionnaires[i];\n      for (let ii = 0; ii < q.questions.length; ii++) {\n        let qq = q.questions[ii];\n\n        this.questionnaires[i].questions[ii].chosen_answer_index = 1;\n      }\n    }\n    if (this.allQuestionnairesFilled()) {\n      this.openNextPageDialog()\n    }\n    // this.uploadFilledQuestionnaires()\n  }\n\n}\n","<!--<button (click)=\"fillQuestionnairesWithDefault()\">DEBUG SAMPLE ANSWERS</button>-->\n\n<div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n  <mat-card-header>\n    <mat-card-title [textContent]=\"getTitle()\"></mat-card-title>\n\n  </mat-card-header>\n\n  <!--List for Questionnaires -- index is i-->\n  <div>\n    <ol *ngFor=\"let questionnaire of this.questionnaires; index as i\">\n      <mat-card class=\"questionnaire-card\">\n        <mat-card-header>\n          <mat-card-title>{{questionnaire.category}}</mat-card-title>\n          <mat-card-subtitle>{{questionnaire.description}}</mat-card-subtitle>\n        </mat-card-header>\n\n\n        <!-- list for questions in questionnaires, -- index is ii -->\n        <ol *ngFor=\"let question of questionnaire.questions; index as ii;\">\n\n          <!--Display a question of the questionnaire-->\n          <mat-card class=\"question-card\" >\n\n            <!--The header containing the question text-->\n            <mat-card-header>\n              <mat-card-title [textContent]=\"question.question_text\"></mat-card-title>\n            </mat-card-header>\n\n            <div fxLayout=\"column\" fxLayoutGap=\"35px\">\n              <!-- List for answers in questions, index is iii-->\n              <ul *ngFor=\"let answer of question.answers_to_show ;index as iii\">\n\n                <!--MAT CARD CONTAINING ONE SINGLE ANSWER-->\n                <mat-card [style.background]=\"getSelected(i, ii, iii)?'rgba(79, 221, 79, 0.36)':'white'\" (click)=\"setAnswerIndex(i,ii,iii)\">\n                  <mat-card-header>\n<!--                    <button mat-stroked-button color=\"primary\" (click)=\"setAnswerIndex(i, ii, iii)\">Select this answer-->\n<!--                    </button>-->\n                    <mat-card-title [textContent]=\"answer.answer_text\"></mat-card-title>\n                  </mat-card-header>\n                </mat-card>\n\n              </ul>\n            </div>\n            <!--          <span>Debug: Chosen Answer Index: {{question.chosen_answer_index}} </span>-->\n          </mat-card>\n        </ol>\n      </mat-card>\n    </ol>\n  </div>\n\n  <button mat-raised-button (click)=\"uploadFilledQuestionnaires()\">Submit Questionnaires</button>\n</div>\n\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\nimport {Router} from \"@angular/router\";\n\n\nexport interface DialogData {\n  animal: 'panda' | 'unicorn' | 'lion';\n}\n\n\n@Component({\n  selector: 'app-explanation-dialog',\n  templateUrl: './explanation-dialog.component.html',\n  styleUrls: ['./explanation-dialog.component.css']\n})\nexport class ExplanationDialogComponent implements OnInit {\n\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {text: string},) { }\n  ngOnInit(): void {\n\n  }\n\n\n}\n","<div fxFlexAlign=\"center center\" style=\"max-width: 800px\">\n\n\n  <h1 mat-dialog-title>How to use this page:</h1>\n  <div mat-dialog-content>\n    {{this.data.text}}\n  </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeedbackService {\n\n  constructor(private http: HttpClient) {\n\n\n  }\n\n  public persistFeedback(feedback: StrategyFeedbackDto[]): Observable<any> {\n\n    console.log(\"sending feedback to backend\")\n\n    console.log(JSON.stringify(feedback))\n    return this.http.post<string>(\"http://localhost:8080/api/feedback\", feedback)\n  }\n}\n\nexport class StrategyFeedbackDto {\n\n  /* GO STRUCT\n    type StrategyFeedback struct {\n\tRating       int       `json:\"rating\"`\n\tStrategyName string    `json:\"strategy_name\"`\n\tUserId       uuid.UUID `json:\"user_id\"`\n}\n   */\n\n  rating: number\n  strategy_name: string\n  user_id: string\n\n  constructor(rating: number, strategy_name: string, user_id: string) {\n    this.rating = rating;\n    this.strategy_name = strategy_name;\n    this.user_id = user_id;\n  }\n}\n","import {Component, OnInit} from '@angular/core';\n\nimport {FintoolRecomDto, ScoreContainer, StrategyComponent, StrategyService} from \"../strategy.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {ExplanationDialogComponent} from \"../explanation-dialog/explanation-dialog.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {NextPageDialogComponent} from \"../next-page-dialog/next-page-dialog.component\";\nimport {ProfilesService} from \"../profiles.service\";\nimport {FeedbackService, StrategyFeedbackDto} from \"../feedback.service\";\n\n\n@Component({\n  selector: 'app-findash',\n  templateUrl: './findash.component.html',\n  styleUrls: ['./findash.component.css']\n})\n\nexport class FindashComponent implements OnInit {\n\n  // dirty initializer hack\n  data: FintoolRecomDto = {} as any\n\n  userScoreArr: number[] = []\n  goodRecomStrats: StrategyComponent[] = [];\n  goodStratArrs: number[][] = [];\n  rawFeedback: number[] = [-1, -1, -1];\n  allRated: boolean = false;\n\n  constructor(private strategySvc: StrategyService, private route: ActivatedRoute,\n              private router: Router,\n              public dialog: MatDialog,\n              public profilesService: ProfilesService,\n              public feedbackService: FeedbackService\n  ) {\n  }\n\n  // abusing array with two slots as a tuplem, 0 is the rating, 1 is the strategy index\n  collectFeedback(tuple: number[]) {\n    console.log(\"saving feedback\")\n    this.rawFeedback[tuple[1]] = tuple[0];\n\n    console.log(\"strategy nr. \" + tuple[1] + \" got rating: \" + tuple[0]);\n\n    this.allRated = this.checkIfFeedbackComplete();\n\n    if (this.allRated) {\n      this.openNextPageDialog()\n    }\n  }\n\n  convertRawFeedbackToDto(): StrategyFeedbackDto[] {\n\n    let feedback: StrategyFeedbackDto[] = []\n\n    for (let i = 0; i < 3; i++) {\n      feedback[i] = new StrategyFeedbackDto(\n        this.rawFeedback[i],\n        this.goodRecomStrats[i].name,\n        this.data.id\n      )\n    }\n\n    return feedback\n  }\n\n  checkIfFeedbackComplete(): boolean {\n    for (let i = 0; i < this.rawFeedback.length; i++) {\n      if (this.rawFeedback[i] === -1) {\n        return false;\n      }\n    }\n    return true\n  }\n\n  ngOnInit(): void {\n    this.strategySvc.data$.subscribe(\n      resp => {\n        this.data = resp;\n        this.data.id = this.strategySvc.currentUserId\n        this.userScoreArr = this.getNumberArray(resp.user_scores)\n        this.goodRecomStrats = this.data.good_recommendation.recommended_components\n        this.extractStrategyScores(this.goodRecomStrats)\n\n        /*\n            DEBUG LOG OUTPUT\n         */\n        this.goodRecomStrats.forEach(\n          strat => {\n            console.log(\"strategy: \" + strat.name)\n            console.log(\"has scores: \" + this.getNumberArrayFromStrategy(strat));\n            // init feedback array\n          }\n        )\n      }\n    );\n    this.openDialog();\n  }\n\n  extractStrategyScores(scs: StrategyComponent[]) {\n    scs.forEach(\n      strategy => {\n        this.goodStratArrs.push([strategy.time_flexibility, strategy.fin_risk_tolerance, strategy.psy_risk_tolerance, strategy.cog_bias_resistance, strategy.financial_knowledge])\n      }\n    );\n  }\n\n  openDialog() {\n    this.dialog.open(ExplanationDialogComponent, {\n      data: {\n        text: \"This page displays personal finance strategies which were  selected based on your questionnaire answers for you.\" +\n          \" \\n Please also rate these strategies. by clicking on the stars on the right\"\n      }\n    });\n  }\n\n  openNextPageDialog(): void {\n    this.feedbackService.persistFeedback(\n      this.convertRawFeedbackToDto()\n    )\n\n      .subscribe(resp => {\n        this.dialog.open(NextPageDialogComponent, {\n          data: {\n            text: \"\",\n            redirectUri: \"/discover\"\n          }\n        })\n      })\n  }\n\n  navigateToDiscovery() {\n    this.feedbackService.persistFeedback(this.convertRawFeedbackToDto()).subscribe(\n      resp => {\n        console.log(\"navigating to discover\")\n        return this.router.navigateByUrl('/discover');\n      })\n  }\n\n  /*\n    Based on: export const radarchartLabels: string[] = ['TimeFlexibility', 'Financial Risk Tolerance', 'Psychological Risk Tolerance', 'Cognitive Bias Resistance', 'Finance Knowledge'];\n   */\n  getNumberArray(sc: ScoreContainer): number[] {\n\n    return [sc.time_flexibility, sc.fin_risk_tolerance, sc.psy_risk_tolerance, sc.cog_bias_resistance, sc.financial_knowledge]\n  }\n\n  getNumberArrayFromStrategy(strat: StrategyComponent): number[] {\n\n    return [strat.time_flexibility, strat.fin_risk_tolerance, strat.psy_risk_tolerance, strat.cog_bias_resistance, strat.financial_knowledge]\n  }\n}\n","<div fxLayout=\"column\">\n\n  <div fxLayoutGap=\"32px\" style=\"margin-bottom: 35px\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>Displaying Results for user id: {{data.id}}</mat-card-title>\n        <mat-card-subtitle>Your Results from the Survey you just completed</mat-card-subtitle>\n      </mat-card-header>\n    </mat-card>\n  </div>\n\n\n  <div fxLayoutAlign=\"center\" fxFlex=\"25\">\n    <div>\n      <app-skillradar style=\"height: 600px; width: 1200px\" [userScores]=\"userScoreArr\" [profileScores]=\"\n              [\n                profilesService.chosenProfile.time_flexibility,\n                profilesService.chosenProfile.fin_risk_tolerance,\n                profilesService.chosenProfile.psy_risk_tolerance,\n                profilesService.chosenProfile.cog_bias_resistance,\n                profilesService.chosenProfile.financial_knowledge,\n\n          ]\">\n\n      </app-skillradar>\n    </div>\n  </div>\n\n  <div fxFlex=75>\n    <ul *ngFor=\"let strategy of this.goodRecomStrats; index as i\">\n\n      <!--<p> {{ this.data.good_recommendation.recommended_components[i].name}}</p>-->\n\n      <mat-card>\n        <div fxLayout.xl=\"row\" fxLayoutGap=\"32px\">\n          <app-stratcompare fxFlex=\"33\" [userScores]=\"userScoreArr\"\n                            [strategyScores]=\"this.goodStratArrs[i]\"></app-stratcompare>\n          <app-strat-details fxFlex=\"33\"\n                             [strategy]=\"this.data.good_recommendation.recommended_components[i]\"></app-strat-details>\n          <app-strat-feedback fxFlex=\"33\"\n                              [strategy]=\"this.data.good_recommendation.recommended_components[i]\"\n                              [strategyIndex]=\"i\"\n                              (stratRatedEmitter)=\"this.collectFeedback($event)\"\n\n          ></app-strat-feedback>\n        </div>\n      </mat-card>\n    </ul>\n  </div>\n  <div fxFlex=\"center center\">\n    <mat-card>\n      <button mat-raised-button (click)=\"navigateToDiscovery()\">Next Page</button>\n    </mat-card>\n  </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-finish',\n  templateUrl: './finish.component.html',\n  styleUrls: ['./finish.component.css']\n})\nexport class FinishComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<mat-card fxFlexAlign=\"center center\">\n  <h1>Thank you for your participation!</h1>\n</mat-card>\n","/*\n  type ScoreContainer struct {\n\tFinRiskTolerance  int `json:\"fin_risk_tolerance\"`\n\tPsyRiskTolerance  int `json:\"psy_risk_tolerance\"`\n\tTimeFlexibility   int `json:\"time_flexibility\"`\n\tCogBiasResistance int `json:\"cog_bias_resistance\"`\n\tFinanceKnowledge  int `json:\"finance_knowledge\"`\n}\n */\nimport {ChartData, DefaultDataPoint} from \"chart.js\";\nimport {FintoolRecom, ScoreContainer} from \"./strategy.service\";\n\nexport const radarchartLabels: string[] = ['TimeFlexibility', 'Financial Risk Tolerance', 'Psychological Risk Tolerance', 'Cognitive Bias Resistance', 'Finance Knowledge'];\n\n\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ChartData, ChartOptions, ChartType} from \"chart.js\";\nimport {radarchartLabels} from \"../ftconstants\";\nimport {ScoreContainer} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-generic-radarchart',\n  templateUrl: './generic-radarchart.component.html',\n  styleUrls: ['./generic-radarchart.component.css']\n})\n\nexport class GenericRadarchartComponent implements OnInit, OnChanges {\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log(\"on changes ...\")\n    this.radarChartData = this.initRadarChartData()\n    this.recolor();\n  }\n\n  @Input() userScores: number[] = [];\n\n  @Input() label: string = \"Your Answers\"; // default value\n\n\n  radarChartData: ChartData<'radar'> = {} as any\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n    console.log(\"initializing radar chart data\")\n    this.radarChartData = this.initRadarChartData();\n    this.recolor();\n  }\n\n  public options: ChartOptions = {\n    responsive: true,\n    scales: {\n      radial: {\n        beginAtZero: true,\n        max: 10,\n        min: 0,\n        ticks: {\n          stepSize: 1\n\n        }\n      }\n    }\n  }\n\n  public initRadarChartData(): ChartData<'radar'> {\n    return {\n      labels: radarchartLabels,\n      datasets: [\n        {data: this.userScores, label: this.label},\n      ]\n    };\n  }\n\n  public recolor(): void {\n    this.radarChartData.datasets[0].backgroundColor = 'rgba(90, 123, 170, 0.17)'\n    this.radarChartData.datasets[0].borderColor = '#507783'\n  }\n\n  public radarChartType: ChartType = 'radar';\n\n  // events\n  public chartClicked({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n  public chartHovered({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n\n  getNumberArray(sc: ScoreContainer): number[] {\n\n    return [sc.time_flexibility, sc.fin_risk_tolerance, sc.psy_risk_tolerance, sc.cog_bias_resistance, sc.financial_knowledge]\n  }\n\n\n}\n","<div>\n    <canvas baseChart [data]=\"radarChartData\" [options]=\"options\" [type]=\"radarChartType\">\n    </canvas>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {ProfilesService, UserProfile} from \"../profiles.service\";\nimport {Router} from \"@angular/router\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ExplanationDialogComponent} from \"../explanation-dialog/explanation-dialog.component\";\nimport {NextPageDialogComponent} from \"../next-page-dialog/next-page-dialog.component\";\n\n@Component({\n  selector: 'app-landingpage',\n  templateUrl: './landingpage.component.html',\n  styleUrls: ['./landingpage.component.css']\n})\nexport class LandingpageComponent implements OnInit {\n\n  profiles: UserProfile[] = [];\n\n  selectedProfileIndex: number = -1;\n\n  showRedirectDialog: boolean = false;\n\n\n  constructor(private profilesService: ProfilesService, private router: Router, public dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.profilesService.getQuestionnaires().subscribe(\n      profiles => {\n        this.profiles = profiles;\n      }\n    )\n    this.openDialog();\n  }\n\n  openDialog(): void {\n    this.dialog.open(ExplanationDialogComponent, {\n      data: {\n        text: \"This is the entrypoint page to our personal finance strategy recommendation and exploration tool.\\n\" +\n          \"Before we can look at actual strategies, we need some input first.\\n\" +\n          \"On this page, please read through the list of predefined profiles and select one  you find most fitting for yourself by clicking on it.\\n\" +\n          \"The page will then redirect to our questionnaire site which will display the next help text.\" +\n          \"\\n A note on data collection: The application does not in any way identify you. No information like IP, \" +\n          \"session, device type, operating system or other browser data is stored. However, the questionnaire results are \" +\n          \"saved under a randomly generated anonymous technical key.\" +\n          \"\\n\" +\n          \"\\n This prototype was created by Lars von Fromberg & Cornelius Koller, both M.Sc. students at the \" +\n          \"Technical University of Munich.\" +\n          \"\\n Please note that this is an experimental prototype.\"\n\n      }\n    });\n  }\n\n  getIfSelectedProfile(index: number): boolean {\n    return index === this.selectedProfileIndex;\n  }\n\n  openNextPageDialog(): void {\n    this.dialog.open(NextPageDialogComponent, {\n      data: {\n        text: \"\",\n        redirectUri: \"/get-started\"\n      }\n    })\n  }\n\n  prettifyProfileTag(tag: string): string {\n    if (tag === \"etf\") {\n      return tag.toUpperCase()\n    }\n\n    let dashReplaceRegex = /[_\\-]/gi;\n\n    return tag.replace(dashReplaceRegex, \" \")\n  }\n\n  selectProfile(index: number, profile: UserProfile): void {\n    console.log(\"profile selected\")\n    this.selectedProfileIndex = index;\n    this.profilesService.cacheChosenProfile(profile);\n    this.openNextPageDialog();\n  }\n\n\n  redirect(): void {\n    this.router.navigateByUrl(\"/get-started\")\n\n  }\n\n}\n\n\n\n","<!-- MAIN CENTERED LAYOUT DIV-->\n<div fxLayout=\"column\" fxLayoutAlign=\"center center\" style=\"margin-top: 150px\">\n  <div style=\"height: 1200px; width: 1100px; margin-bottom: 50px; margin-top: 50px;\">\n\n    <div>\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Which of these statements best describes why you are viewing this page? (Scroll down to view\n            all)\n          </mat-card-title>\n          <mat-card-subtitle>These profiles act as a starting point for your recommendation so please choose carefully\n          </mat-card-subtitle>\n        </mat-card-header>\n      </mat-card>\n    </div>\n    <div>\n      <ul *ngFor=\"let profile of this.profiles ; index as i\">\n\n        <mat-card [style.background]=\"getIfSelectedProfile(i)?'rgba(79, 221, 79, 0.36)':'white'\" (click)=\"selectProfile(i, profiles[i])\" style=\"margin-top: 50px; margin-bottom: 50px\">\n          <div fxLayout=\"row\" fxLayoutGap=\"15px\" fxLayoutAlign=\"space-between none\">\n\n            <div fxFlex=\"50\">\n              <mat-card>\n                <h3>{{this.profiles[i].reason}}</h3>\n                <br/>\n                <p>Attributes this profile is associated with:</p>\n                <ul *ngFor=\"let tag of this.profiles[i].tags\">\n                  <p>{{prettifyProfileTag(tag)}}</p>\n                </ul>\n              </mat-card>\n            </div>\n\n            <div fxFlex=\"50\">\n\n              <mat-card>\n                <app-generic-radarchart [userScores]=\" [\n                profiles[i].time_flexibility,\n                profiles[i].fin_risk_tolerance,\n                profiles[i].psy_risk_tolerance,\n                profiles[i].cog_bias_resistance,\n                profiles[i].financial_knowledge,\n                ]\"\n                                        label=\"Profile Stats\"></app-generic-radarchart>\n              </mat-card>\n            </div>\n\n          </div>\n        </mat-card>\n      </ul>\n    </div>\n\n  </div>\n\n  <!-- MAIN CENTERED LAYOUT DIV END-->\n</div>\n","import {Component, Inject, OnInit, EventEmitter} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-next-page-dialog',\n  templateUrl: './next-page-dialog.component.html',\n  styleUrls: ['./next-page-dialog.component.css']\n})\nexport class NextPageDialogComponent implements OnInit {\n\n  buttonClicked = new EventEmitter();\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { text: string, redirectUri: string }, private router: Router, private dialogRef: MatDialogRef<NextPageDialogComponent>) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  redirect(): void {\n    this.router.navigateByUrl(this.data.redirectUri)\n    this.buttonClicked.emit();\n    this.dialogRef.close();\n  }\n\n}\n","<p>All finished?</p>\n<button mat-button (click)=\"redirect()\">Go to next page!</button>\n","import {Injectable} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {McQuestionnaire} from \"./questionnaire.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ScoreContainer} from \"./strategy.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfilesService {\n\n  chosenProfile: UserProfile;\n\n  constructor(private httpClient: HttpClient) {\n    this.chosenProfile = new UserProfile(\n      \"default\",\n      \"default\",\n      [\"default\"],\n      \"default\",\n      0, 0, 0, 0, 0\n    )\n  }\n\n  getQuestionnaires(): Observable<UserProfile[]> {\n    return this.httpClient.get<UserProfile[]>(\"http://localhost:8080/api/profiles\")\n  }\n\n  cacheChosenProfile(profile: UserProfile) {\n    this.chosenProfile = profile;\n  }\n\n  getChosenProfile() {\n    return this.chosenProfile\n  }\n\n  /*\n  GO STRUCT\n  type UserProfile struct {\nName        string   `json:\"name\"`\nDescription string   `json:\"description\"`\nTags        []string `json:\"tags\"`\nReason      string   `json:\"reason\"`\n}\n */\n}\n\n// public fields for JSON SerDes\nexport class UserProfile {\n  name: string\n  description: string\n  tags: string[]\n  reason: string\n  score_container: ScoreContainer\n\n  time_flexibility: number\n  fin_risk_tolerance: number\n  psy_risk_tolerance: number\n  financial_knowledge: number\n  cog_bias_resistance: number\n\n\n  constructor(name: string,\n              description: string,\n              tags: string[],\n              reason: string,\n              time_flexibility: number,\n              fin_risk_tolerance: number,\n              psy_risk_tolerance: number,\n              financial_knowledge: number,\n              cog_bias_resistance: number,\n  ) {\n    this.name = name;\n    this.description = description;\n    this.tags = tags;\n    this.reason = reason;\n    this.time_flexibility = time_flexibility;\n    this.fin_risk_tolerance = fin_risk_tolerance;\n    this.psy_risk_tolerance = psy_risk_tolerance;\n    this.financial_knowledge = financial_knowledge;\n    this.cog_bias_resistance = cog_bias_resistance;\n\n    this.score_container = new ScoreContainer(\n      this.time_flexibility,\n      this.fin_risk_tolerance,\n      this.psy_risk_tolerance,\n      this.financial_knowledge,\n      this.cog_bias_resistance,\n    )\n\n\n\n  }\n  getAsNumberArr() :number[] {\n    return [this.time_flexibility, this.fin_risk_tolerance, this.psy_risk_tolerance, this.cog_bias_resistance, this.financial_knowledge]\n\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, ReplaySubject} from \"rxjs\";\nimport {catchError, shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionnaireService {\n\n\n  private dataSubject = new ReplaySubject<McQuestionnaire>(1);\n\n  data$: Observable<McQuestionnaire> = this.dataSubject.asObservable();\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n\n\n  getQuestionnaires(): Observable<McQuestionnaire[]> {\n    return this.httpClient.get<McQuestionnaire[]>(\"http://localhost:8080/api/questionnaires/all\")\n  }\n\n  getQuestionnaireList(): Observable<string[]> {\n    return this.httpClient.get<string[]>(\"http://localhost:8080/api/questionnaires\")\n  }\n}\n\nexport class McQuestionnaire {\n\n  constructor(category: string,\n              description: string,\n              questions: McQuestion[]) {\n\n    this.category = category;\n    this.description = description;\n    this.questions = questions;\n  }\n\n  category: string\n  description: string\n  questions: McQuestion[]\n\n}\n\nexport class Metadata {\n  public category: string\n\n\n  constructor(category: string) {\n    this.category = category;\n  }\n}\n\n\nexport class McQuestion {\n\n  public metadata: Metadata\n\n  public answers_to_show: McAnswer[]\n  public question_text: string\n  public chosen_answer_index: number\n\n\n  constructor(metadata: Metadata, answersToShow: McAnswer[], questionText: string, chosenAnswerIndex: number) {\n    this.metadata = metadata;\n    this.answers_to_show = answersToShow;\n    this.question_text = questionText;\n    this.chosen_answer_index = chosenAnswerIndex;\n  }\n\n\n}\n\nexport class McAnswer {\n  public answer_text: string\n  public value: number\n\n\n  constructor(answerText: string, value: number) {\n    this.answer_text = answerText;\n    this.value = value;\n  }\n}\n","\nimport {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ChartConfiguration, ChartData, ChartOptions, ChartType, RadarControllerChartOptions} from \"chart.js\";\nimport {radarchartLabels} from \"../ftconstants\";\nimport {FintoolRecomDto, ScoreContainer, StrategyService} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-skillradar',\n  templateUrl: './skillradar.component.html',\n  styleUrls: ['./skillradar.component.css']\n})\nexport class SkillradarComponent implements OnInit, OnChanges {\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log(\"on changes ...\")\n    this.radarChartData = this.initRadarChartData()\n    this.recolor();\n  }\n\n  @Input() userScores: number[] = [];\n\n  @Input() profileScores: number[]  = [];\n\n  @Input() label: string = \"Your Answers\"; // default value\n\n  // @ts-ignore\n  @Input() userScoreContainer: ScoreContainer;\n\n  radarChartData: ChartData<'radar'> = {} as any\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n    console.log(\"initializing radar chart data\")\n    this.radarChartData = this.initRadarChartData();\n    this.recolor();\n  }\n\n  public options: ChartOptions = {\n    responsive: true,\n    scales: {\n      radial: {\n        beginAtZero: true,\n        max: 10,\n        min: 0,\n        ticks: {\n          stepSize: 1\n\n        }\n      }\n    }\n  }\n\n  public initRadarChartData(): ChartData<'radar'> {\n    if (null === this.userScoreContainer || undefined === this.userScoreContainer) {\n      return {\n        labels: radarchartLabels,\n        datasets: [\n          {data: this.userScores, label: this.label},\n          {data: this.profileScores, label: \"Profile You Selected\"},\n        ]\n      };\n    }\n    return {\n      labels: radarchartLabels,\n      datasets :[\n        {data : this.getNumberArray(this.userScoreContainer), label: this.label}\n      ]\n    };\n  }\n\n  public recolor(): void {\n    this.radarChartData.datasets[0].backgroundColor = 'rgba(90, 123, 170, 0.17)'\n    this.radarChartData.datasets[0].borderColor = '#507783'\n\n    this.radarChartData.datasets[1].backgroundColor = 'rgba(255, 102, 0, 0.17)'\n    this.radarChartData.datasets[1].borderColor = '#ff6600'\n\n  }\n\n  public radarChartType: ChartType = 'radar';\n\n  // events\n  public chartClicked({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n  public chartHovered({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n\n  getNumberArray(sc: ScoreContainer): number[] {\n\n    return [sc.time_flexibility, sc.fin_risk_tolerance, sc.psy_risk_tolerance, sc.cog_bias_resistance, sc.financial_knowledge]\n  }\n\n\n}\n","<div style=\"width: 1500px; height: 800px\">\n  <div fxLayout=\"row\" fxLayoutGap=\"50px\">\n\n    <div fxFlex=\"50\">\n\n      <mat-card>\n        <canvas baseChart [data]=\"radarChartData\" [options]=\"options\" [type]=\"radarChartType\">\n        </canvas>\n      </mat-card>\n    </div>\n\n    <div fxFlex=\"50\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Your Results:</mat-card-title>\n          <mat-card-subtitle>You scored the following average values in these categories:</mat-card-subtitle>\n        </mat-card-header>\n\n        <p>Time & Flexibility: {{this.userScores[0]}}</p>\n        <p>Finance Knowledge: {{this.userScores[4]}}</p>\n        <p>Cognitive Bias Resistance: {{this.userScores[3]}}</p>\n        <p>Financial Risk Tolerance: {{this.userScores[1]}}</p>\n        <p>Psychological Risk Tolerance: {{this.userScores[2]}}</p>\n      </mat-card>\n      <mat-card style=\"margin-top: 75px\">\n        <mat-card-header>\n          <mat-card-title>How to read the radar chart on the left:</mat-card-title>\n        </mat-card-header>\n\n        <p>The red area is the representation of the profile you picked on the first page. </p>\n        <p>The blue area is the area created from your answers to the questions you just completed\n        </p>\n        <p>The bigger the overlap, the better your self-description is.</p>\n      </mat-card>\n\n  <mat-card style=\"margin-top: 75px\">\n        <mat-card-header>\n          <mat-card-title>How to read the Strategy Cards below:</mat-card-title>\n        </mat-card-header>\n\n        <p>The yellow area is the representation of the strategy that's been selected for you. </p>\n        <p>The blue area is the area created from your answers to the questions you just completed\n        </p>\n        <p>The bigger the overlap, the better fitting the strategy should be for you.</p>\n      <p>Please indicate the degree to which you like the strategy by clicking on the star ribbon on the right of each card</p>\n      </mat-card>\n\n\n    </div>\n  </div>\n\n</div>\n","<div>\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>{{ strategy.name}}</mat-card-title>\n    </mat-card-header>\n    <h3>Major advantages of this strategy:</h3>\n    <div>\n      <ul *ngFor=\"let pro of this.strategy.major_pros\">\n        <p>- {{ pro }}</p>\n      </ul>\n    </div>\n    <h3>Major drawbacks of this strategy:</h3>\n    <div>\n      <ul *ngFor=\"let con of this.strategy.major_cons\">\n        <p>- {{ con }}</p>\n      </ul>\n\n    </div>\n\n    <h3>Full Description</h3>\n    {{ strategy.description }}\n  </mat-card>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {StrategyComponent} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-strat-details',\n  templateUrl: './strat-details.component.html',\n  styleUrls: ['./strat-details.component.css']\n})\nexport class StratDetailsComponent implements OnInit {\n\n  @Input() strategy: StrategyComponent = {} as any;\n\n  constructor() {\n  }\n\n\n  ngOnInit(): void {\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {StrategyComponent} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-strat-feedback',\n  templateUrl: './strat-feedback.component.html',\n  styleUrls: ['./strat-feedback.component.css']\n})\nexport class StratFeedbackComponent implements OnInit {\n\n  @Input() strategy: StrategyComponent = {} as any;\n  @Input() strategyIndex: number = -1;\n\n\n  rating: number = 2.5;\n  rated: boolean = false;\n\n  @Output() stratRatedEmitter: EventEmitter<number[]> = new EventEmitter<number[]>();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  onRatingSet(rating: number) {\n    this.rated = true;\n    this.rating = rating;\n    this.stratRatedEmitter.emit([this.rating, this.strategyIndex])\n  }\n}\n","<mat-card>\n  <mat-card-header>\n    <mat-card-title>Your Feedback for the strategy <br>'{{ strategy.name}}'</mat-card-title>\n    <br>\n    <mat-card-subtitle>Please enter your feedback for this recommendation here</mat-card-subtitle>\n  </mat-card-header>\n\n  <ngx-stars [readonly]=\"false\" [size]=\"4\" [initialStars]=\"2.5\" [color]=\"'#F1E978'\"\n             (ratingOutput)=\"onRatingSet($event)\"></ngx-stars>\n\n  <div *ngIf=\"rated\">\n    Feedback saved\n  </div>\n</mat-card>\n","import {Component, Inject, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ChartConfiguration, ChartData, ChartOptions, ChartType} from \"chart.js\";\nimport {radarchartLabels} from \"../ftconstants\";\n\n\n@Component({\n  selector: 'app-stratcompare',\n  templateUrl: './stratcompare.component.html',\n  styleUrls: ['./stratcompare.component.css']\n})\n\n/*\n    This component serves a comparison chart between the user's answers and a given strategy\n    in practice, these strategies are returned from the backend.\n */\nexport class StratcompareComponent implements OnInit, OnChanges {\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log(\"on changes ...\")\n    this.radarChartData = this.initRadarChartData()\n    this.recolor()\n  }\n\n  @Input() userScores: number[] = [];\n  @Input() strategyScores: number[] = [];\n\n  radarChartData: ChartData<'radar'> = {} as any;\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n    this.radarChartData = this.initRadarChartData();\n    this.recolor()\n  }\n\n  // Radar\n  public radarChartOptions: ChartConfiguration['options'] = {\n    responsive: true,\n  };\n\n  public options: ChartOptions = {\n    responsive: true,\n    scales: {\n      radial: {\n        beginAtZero: true,\n        max: 10,\n        min: 0,\n        ticks: {\n          stepSize: 1\n\n        }\n      }\n    }\n  }\n\n  // public options: ChartOptions = {\n  //   responsive: true,\n  //\n  //   scales: {\n  //     ticks: {\n  //       suggestedMin: 0,\n  //       suggestedMax: 10,\n  //     }\n  //   }\n  // };\n\n  /*\n    public radarChartData: ChartData<'radar'> = {\n      labels: radarchartLabels,\n      datasets: [\n        {data: [65, 59, 10, 81, 15], label: 'Series A'},\n        {data: [28, 48, 40, 19, 60], label: 'Series B'},\n      ]\n    };\n   */\n\n  public initRadarChartData(): ChartData<'radar'> {\n    console.log(\"user scores: \" + this.userScores)\n    console.log(\"strategy scores: \" + this.strategyScores)\n\n    return {\n      labels: radarchartLabels,\n      datasets: [\n        {data: this.userScores, label: 'User Answers', spanGaps: true},\n        {data: this.strategyScores, label: 'Strategy Values', spanGaps: true},\n    //    {data: this.refScores, hidden: false, showLine: false, label: 'Theoretical Maximum'},\n      ]\n    }\n  }\n\n  public refScores: number[] = [10, 10, 10, 10, 10]\n\n\n  public recolor(): void {\n    console.log(\"recoloring radar chart\")\n    this.radarChartData.datasets[0].backgroundColor = 'rgba(90, 123, 170, 0.17)'\n    this.radarChartData.datasets[0].borderColor = '#507783'\n\n    this.radarChartData.datasets[1].backgroundColor = 'rgba(231, 243, 11, 0.17)'\n    this.radarChartData.datasets[1].borderColor = '#F1E978'\n\n\n  }\n\n  public radarChartType: ChartType = 'radar';\n\n  // events\n  public chartClicked({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n  public chartHovered({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n}\n","<mat-card >\n  <div>\n    <canvas baseChart [data]=\"radarChartData\" [options]=\"options\" [type]=\"radarChartType\">\n    </canvas>\n  </div>\n</mat-card>\n","import {Injectable} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {McQuestionnaire} from \"./questionnaire.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {UserProfile} from \"./profiles.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StrategyService {\n\n\n  private _data$: Observable<FintoolRecomDto>;\n  private _currentUserId: string = \"\"\n\n\n  constructor(private httpClient: HttpClient) {\n\n    this._data$ = new Observable<any>();\n  }\n\n  postFilledQuestionnaires(questionnaires: McQuestionnaire[], profile: UserProfile): Observable<FintoolRecomDto> {\n\n    this._data$ = this.httpClient.post<FintoolRecomDto>(\n      \"http://localhost:8080/api/questionnaires/submit\",\n      new SubmitDto(\n        questionnaires,\n        profile\n      ))\n    return this._data$\n  }\n\n  getRandomStrategySample(): Observable<StrategyComponent[]> {\n    return this.httpClient.get<StrategyComponent[]>(\"http://localhost:8080/api/random\")\n  }\n\n  get data$(): Observable<FintoolRecomDto> {\n    /*\n\n     */\n    return this._data$;\n  }\n\n  set data$(value: Observable<FintoolRecomDto>) {\n    this._data$ = value;\n  }\n\n  get currentUserId(): string {\n    return this._currentUserId;\n  }\n\n  set currentUserId(value: string) {\n    this._currentUserId = value;\n  }\n}\n\n\n\n/*\n    The DTO that is returned from backend, it encapsulates a recommendation and an id\n */\nexport class FintoolRecomDto {\n\n  constructor(good_recommendation: FintoolRecom,\n              bad_recommendation: FintoolRecom,\n              id: string,\n              user_scores: ScoreContainer,\n              profile: UserProfile\n  ) {\n    this.good_recommendation = good_recommendation;\n    this.bad_recommendation = bad_recommendation;\n    this.id = id;\n    this.user_scores = user_scores\n    this.profile = profile\n  }\n\n  id: string\n  good_recommendation: FintoolRecom\n  bad_recommendation: FintoolRecom\n  user_scores: ScoreContainer\n  profile: UserProfile\n}\n\n/*\n\n */\n\nexport class SubmitDto {\n\n  questionnaires: McQuestionnaire[]\n  profile: UserProfile\n\n\n  constructor(questionnaires: McQuestionnaire[], profile: UserProfile) {\n    this.questionnaires = questionnaires;\n    this.profile = profile;\n  }\n}\n\n/*\n    The actual recommendation, encapsulating the components#\n    BAsed on:\n    type FintoolRecom struct {\n\tRecommendedComponents [3]StrategyComponent `json:\"recommended_components\"`\n\tWildcardComponent     StrategyComponent    `json:\"wildcard_component\"`\n}\n\n */\nexport class FintoolRecom {\n\n  constructor(recommended_components: StrategyComponent[], wildcard_component: StrategyComponent) {\n    this.recommended_components = recommended_components;\n    this.wildcard_component = wildcard_component;\n  }\n\n  recommended_components: StrategyComponent[]\n  wildcard_component: StrategyComponent\n}\n\n/*\n    An actual personal finance strategy component, this encapsulates the raw numerical category stores\n */\nexport class StrategyComponent {\n\n  time_flexibility: number\n  fin_risk_tolerance: number\n  psy_risk_tolerance: number\n  financial_knowledge: number\n  cog_bias_resistance: number\n\n  score_container: ScoreContainer\n  description: string;\n  name: string;\n\n  links: string[] = [];\n  tags: string[] = [];\n  major_pros: string[] = [];\n  major_cons: string[] = [];\n\n  constructor(description: string,\n              name: string,\n              time_flexibility: number,\n              fin_risk_tolerance: number,\n              psy_risk_tolerance: number,\n              financial_knowledge: number,\n              cog_bias_resistance: number,\n              links: string[],\n              tags: string[],\n              major_pros: string[],\n              major_cons: string[],\n  ) {\n    this.description = description;\n\n\n    this.time_flexibility = time_flexibility;\n    this.fin_risk_tolerance = fin_risk_tolerance;\n    this.psy_risk_tolerance = psy_risk_tolerance;\n    this.financial_knowledge = financial_knowledge;\n    this.cog_bias_resistance = cog_bias_resistance;\n    this.name = name;\n    this.links = links;\n    this.tags = tags;\n    this.major_cons = major_cons;\n    this.major_pros = major_pros;\n\n    this.score_container = new ScoreContainer(\n      this.time_flexibility,\n      this.fin_risk_tolerance,\n      this.psy_risk_tolerance,\n      this.financial_knowledge,\n      this.cog_bias_resistance,\n    )\n  }\n}\n\n/*\n  type ScoreContainer struct {\n\tFinRiskTolerance  int `json:\"fin_risk_tolerance\"`\n\tPsyRiskTolerance  int `json:\"psy_risk_tolerance\"`\n\tTimeFlexibility   int `json:\"time_flexibility\"`\n\tCogBiasResistance int `json:\"cog_bias_resistance\"`\n\tFinanceKnowledge  int `json:\"finance_knowledge\"`\n}\n */\nexport class ScoreContainer {\n  time_flexibility: number\n  fin_risk_tolerance: number\n  psy_risk_tolerance: number\n  financial_knowledge: number\n  cog_bias_resistance: number\n\n  getAsNumberArr(): number[] {\n    return [this.time_flexibility, this.fin_risk_tolerance, this.psy_risk_tolerance, this.cog_bias_resistance, this.financial_knowledge]\n\n  }\n\n\n  constructor(time_flexibility: number,\n              fin_risk_tolerance: number,\n              psy_risk_tolerance: number,\n              financial_knowledge: number,\n              cog_bias_resistance: number) {\n    this.time_flexibility = time_flexibility;\n    this.fin_risk_tolerance = fin_risk_tolerance;\n    this.psy_risk_tolerance = psy_risk_tolerance;\n    this.financial_knowledge = financial_knowledge;\n    this.cog_bias_resistance = cog_bias_resistance;\n  }\n\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}