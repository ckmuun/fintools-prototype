{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/discovery/discovery.component.html","./src/app/discovery/discovery.component.ts","./src/app/entrypoint/entrypoint.component.html","./src/app/entrypoint/entrypoint.component.ts","./src/app/explanation/explanation.component.ts","./src/app/explanation/explanation.component.html","./src/app/findash/findash.component.html","./src/app/findash/findash.component.ts","./src/app/ftconstants.ts","./src/app/questionnaire.service.ts","./src/app/skillradar/skillradar.component.ts","./src/app/skillradar/skillradar.component.html","./src/app/strat-details/strat-details.component.html","./src/app/strat-details/strat-details.component.ts","./src/app/strat-feedback/strat-feedback.component.ts","./src/app/strat-feedback/strat-feedback.component.html","./src/app/stratcompare/stratcompare.component.ts","./src/app/stratcompare/stratcompare.component.html","./src/app/strategy.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {EntrypointComponent} from \"./entrypoint/entrypoint.component\";\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'get-started', pathMatch: 'full' },\n  {path: 'get-started', component: EntrypointComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ft-frontend';\n}\n","<mat-toolbar  class=\"toolbar mat-elevation-z2\" color=\"primary\">Fintools Prototype</mat-toolbar>\n<router-outlet></router-outlet>\n","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {EntrypointComponent} from './entrypoint/entrypoint.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {FindashComponent} from \"./findash/findash.component\";\nimport {ChartsModule} from \"ng2-charts\";\nimport {SkillradarComponent} from './skillradar/skillradar.component';\nimport {MatGridListModule} from \"@angular/material/grid-list\";\nimport {StratcompareComponent} from './stratcompare/stratcompare.component';\nimport {StratDetailsComponent} from './strat-details/strat-details.component';\nimport {FlexLayoutModule} from \"@angular/flex-layout\";\nimport {StratFeedbackComponent} from './strat-feedback/strat-feedback.component';\nimport {NgxStarsModule} from \"ngx-stars\";\nimport {ExplanationComponent} from './explanation/explanation.component';\nimport {DiscoveryComponent} from './discovery/discovery.component';\n\nconst routes: Routes = [\n  {path: 'get-started', component: EntrypointComponent},\n  {path: 'dashboard', component: FindashComponent},\n  {path: 'radar', component: SkillradarComponent},\n  {path: 'discover', component: DiscoveryComponent},\n];\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    EntrypointComponent,\n    FindashComponent,\n    SkillradarComponent,\n    StratcompareComponent,\n    StratDetailsComponent,\n    StratFeedbackComponent,\n    ExplanationComponent,\n    DiscoveryComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    RouterModule.forRoot(routes),\n    ChartsModule,\n    MatGridListModule,\n    FlexLayoutModule,\n    NgxStarsModule,\n  ],\n\n  exports: [RouterModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","<div fxLayout=\"column\">\n\n  <div fxLayoutGap=\"32px\" style=\"margin-bottom: 35px\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>Displaying other strategies for user id: {{data.id}}</mat-card-title>\n      </mat-card-header>\n    </mat-card>\n  </div>\n  <div fxFlex=75>\n    <ul *ngFor=\"let strategy of this.badRecomStrats; index as i\">\n\n      <!--<p> {{ this.data.good_recommendation.recommended_components[i].name}}</p>-->\n\n      <mat-card>\n        <div fxLayout.xl=\"row\" fxLayoutGap=\"32px\">\n          <app-stratcompare fxFlex=\"33\" [userScores]=\"userScoreArr\"\n                            [strategyScores]=\"this.badStratArrs[i]\"></app-stratcompare>\n          <app-strat-details fxFlex=\"33\"\n                             [strategy]=\"this.data.bad_recommendation.recommended_components[i]\"></app-strat-details>\n          <app-strat-feedback fxFlex=\"33\"\n                              [strategy]=\"this.data.bad_recommendation.recommended_components[i]\"></app-strat-feedback>\n        </div>\n      </mat-card>\n    </ul>\n  </div>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {FintoolRecomDto, ScoreContainer, StrategyComponent, StrategyService} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-discovery',\n  templateUrl: './discovery.component.html',\n  styleUrls: ['./discovery.component.css']\n})\nexport class DiscoveryComponent implements OnInit {\n\n  constructor(private strategySvc: StrategyService) { }\n\n  // dirty initializer hack\n  data: FintoolRecomDto = {} as any\n\n  userScoreArr: number[] = []\n  badRecomStrats: StrategyComponent[] = [];\n  badStratArrs: number[][] = [];\n\n  randomSample: StrategyComponent[] = [];\n\n  ngOnInit(): void {\n    this.strategySvc.data$.subscribe(\n      resp => {\n        this.data = resp;\n        this.userScoreArr = this.getNumberArray(resp.user_scores)\n        this.badRecomStrats = this.data.bad_recommendation.recommended_components\n        this.extractStrategyScores(this.badRecomStrats)\n\n\n        console.log(\"DEBUG OUTPUT\")\n        this.badRecomStrats.forEach(\n          strat => {\n            console.log(\"strategy: \" + strat.name)\n            console.log(\"has scores: \" + this.getNumberArrayFromStrategy(strat));\n          });\n      }\n    )\n\n    this.strategySvc.stratSampleData$.subscribe(\n      resp => {\n        this.randomSample = resp;\n        // todo extract data here more fine-grained.\n      }\n    )\n  }\n\n  extractStrategyScores(scs: StrategyComponent[]) {\n    scs.forEach(\n      strategy => {\n        this.badStratArrs.push([strategy.time_flexibility, strategy.fin_risk_tolerance, strategy.psy_risk_tolerance, strategy.cog_bias_resistance, strategy.financial_knowledge])\n      }\n    )\n  }\n\n  /*\n    Based on: export const radarchartLabels: string[] = ['TimeFlexibility', 'Financial Risk Tolerance', 'Psychological Risk Tolerance', 'Cognitive Bias Resistance', 'Finance Knowledge'];\n   */\n  getNumberArray(sc: ScoreContainer): number[] {\n    return [sc.time_flexibility, sc.fin_risk_tolerance, sc.psy_risk_tolerance, sc.cog_bias_resistance, sc.financial_knowledge]\n  }\n  getNumberArrayFromStrategy(strat: StrategyComponent): number[] {\n\n    return [strat.time_flexibility, strat.fin_risk_tolerance, strat.psy_risk_tolerance, strat.cog_bias_resistance, strat.financial_knowledge]\n  }\n}\n","<ol *ngFor=\"let category of this.qCategories\">\n  <li>\n    <p>category:{{category}}</p>\n  </li>\n</ol>\n<button (click)=\"fillQuestionnairesWithDefault()\">DEBUG SAMPLE ANSWERS</button>\n\n<mat-card fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n  <mat-card-header>\n    <mat-card-title [textContent]=\"getTitle()\"></mat-card-title>\n\n  </mat-card-header>\n\n  <!--List for Questionnaires -- index is i-->\n  <div>\n    <ol *ngFor=\"let questionnaire of this.questionnaires; index as i\">\n      <mat-card class=\"questionnaire-card\">\n        <mat-card-header>\n          <mat-card-title>{{questionnaire.category}}</mat-card-title>\n          <mat-card-subtitle>{{questionnaire.description}}</mat-card-subtitle>\n        </mat-card-header>\n\n\n        <!-- list for questions in questionnaires, -- index is ii -->\n        <ol *ngFor=\"let question of questionnaire.questions; index as ii;\">\n\n          <!--Display a question of the questionnaire-->\n          <mat-card class=\"question-card\" >\n\n            <!--The header containing the question text-->\n            <mat-card-header>\n              <mat-card-title [textContent]=\"question.question_text\"></mat-card-title>\n            </mat-card-header>\n\n            <div fxLayout=\"column\" fxLayoutGap=\"35px\">\n              <!-- List for answers in questions, index is iii-->\n              <ul *ngFor=\"let answer of question.answers_to_show ;index as iii\">\n\n                <!--MAT CARD CONTAINING ONE SINGLE ANSWER-->\n                <mat-card [style.background]=\"getSelected(i, ii, iii)?'rgba(79, 221, 79, 0.36)':'white'\" (click)=\"setAnswerIndex(i,ii,iii)\">\n                  <mat-card-header>\n<!--                    <button mat-stroked-button color=\"primary\" (click)=\"setAnswerIndex(i, ii, iii)\">Select this answer-->\n<!--                    </button>-->\n                    <mat-card-title [textContent]=\"answer.answer_text\"></mat-card-title>\n                  </mat-card-header>\n                </mat-card>\n\n              </ul>\n            </div>\n            <!--          <span>Debug: Chosen Answer Index: {{question.chosen_answer_index}} </span>-->\n          </mat-card>\n        </ol>\n      </mat-card>\n    </ol>\n  </div>\n\n  <button mat-raised-button (click)=\"uploadFilledQuestionnaires()\">Submit Questionnaires</button>\n</mat-card>\n\n","import {Component, OnInit} from '@angular/core';\nimport {McQuestionnaire, QuestionnaireService} from \"../questionnaire.service\";\nimport {StrategyService} from \"../strategy.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-entrypoint',\n  templateUrl: './entrypoint.component.html',\n  styleUrls: ['./entrypoint.component.css']\n})\nexport class EntrypointComponent implements OnInit {\n\n\n  // ##### Domain and application imports #####\n  questionnaires: McQuestionnaire[];\n  showSubmitModal: boolean = false;\n\n  qCategories: string[];\n\n  constructor(private qSvc: QuestionnaireService,\n              private stratSvc: StrategyService,\n              private route: ActivatedRoute,\n              private router: Router) {\n    this.qCategories = [];\n    this.questionnaires = [];\n  }\n\n  getTitle(): string {\n    return \"Questionnaires:\"\n  }\n\n  getSelected(questionnaireIndex: number, questionIndex: number, answerIndex: number): boolean {\n    return this.questionnaires[questionnaireIndex]\n      .questions[questionIndex]\n      .chosen_answer_index === answerIndex;\n  }\n\n  ngOnInit(): void {\n    console.log(\"init entrypoint component\")\n    this.qSvc.getQuestionnaires().subscribe(\n      q => {\n        this.questionnaires = q\n      }\n    )\n\n    this.qSvc.getQuestionnaireList().subscribe(\n      categories => this.qCategories = categories\n    )\n  }\n\n  openSubmitModal() {\n\n    if (this.allQuestionnairesFilled()) {\n      this.showSubmitModal = true\n    } else {\n      // todo display some \"not all questionnnaires filled warning\"\n    }\n    // todo open submit modal here\n    return\n  }\n\n  navigateToFindash() {\n    this.router.navigateByUrl('/dashboard')\n  }\n\n  uploadFilledQuestionnaires() {\n\n    return this.stratSvc.postFilledQuestionnaires(this.questionnaires).subscribe(\n      response => {\n        console.log(\"received upload response, routing to dashboard component\")\n        console.log(\"response:\" + response.id)\n        this.navigateToFindash()\n      }\n    )\n  }\n\n  setAnswerIndex(questionnaireIndex: number, questionIndex: number, answerIndex: number) {\n    console.log(\"setting chosen answer in questionnaire: \" + questionnaireIndex + \"\\n question: \" + questionIndex + \"\\n to answer at index: \" + answerIndex)\n\n    this.questionnaires[questionnaireIndex]\n      .questions[questionIndex]\n      .chosen_answer_index = answerIndex\n  }\n\n  allQuestionnairesFilled(): boolean {\n    if (this.questionnaires.length === 0) {\n      return false;\n    }\n\n    for (let i = 0; i < this.questionnaires.length; i++) {\n      let q = this.questionnaires[i];\n      for (let ii = 0; ii < q.questions.length; ii++) {\n        let qq = q.questions[ii];\n\n        // -1 is the default index set by backend\n        if (qq.chosen_answer_index === -1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // DEBUG ONLY\n  fillQuestionnairesWithDefault() {\n    for (let i = 0; i < this.questionnaires.length; i++) {\n      let q = this.questionnaires[i];\n      for (let ii = 0; ii < q.questions.length; ii++) {\n        let qq = q.questions[ii];\n\n        this.questionnaires[i].questions[ii].chosen_answer_index = 1;\n      }\n    }\n    this.uploadFilledQuestionnaires()\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-explanation',\n  templateUrl: './explanation.component.html',\n  styleUrls: ['./explanation.component.css']\n})\nexport class ExplanationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>explanation works!</p>\n","<div fxLayout=\"column\">\n\n  <div fxLayoutGap=\"32px\" style=\"margin-bottom: 35px\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>Displaying Results for user id: {{data.id}}</mat-card-title>\n        <mat-card-subtitle>Your Results from the Survey you just completed</mat-card-subtitle>\n      </mat-card-header>\n    </mat-card>\n  </div>\n\n\n  <div fxLayoutAlign=\"center\" fxFlex=\"25\">\n    <div>\n      <app-skillradar style=\"height: 600px; width: 1200px\" [userScores]=\"userScoreArr\"></app-skillradar>\n    </div>\n  </div>\n\n  <div fxFlex=75>\n    <ul *ngFor=\"let strategy of this.goodRecomStrats; index as i\">\n\n      <!--<p> {{ this.data.good_recommendation.recommended_components[i].name}}</p>-->\n\n      <mat-card>\n        <div fxLayout.xl=\"row\" fxLayoutGap=\"32px\">\n          <app-stratcompare fxFlex=\"33\" [userScores]=\"userScoreArr\"\n                            [strategyScores]=\"this.goodStratArrs[i]\"></app-stratcompare>\n          <app-strat-details fxFlex=\"33\"\n                             [strategy]=\"this.data.good_recommendation.recommended_components[i]\"></app-strat-details>\n          <app-strat-feedback fxFlex=\"33\"\n                              [strategy]=\"this.data.good_recommendation.recommended_components[i]\"></app-strat-feedback>\n        </div>\n      </mat-card>\n    </ul>\n  </div>\n  <div fxFlex=\"center center\">\n    <mat-card>\n      <button mat-raised-button (click)=\"navigateToDiscovery()\">Next Page</button>\n    </mat-card>\n  </div>\n</div>\n\n","import {Component, OnInit} from '@angular/core';\n\nimport {ChartOptions, ChartType, ChartDataset, ChartData} from 'chart.js'\nimport {BaseChartDirective} from \"ng2-charts\";\nimport DataLabelsPlugin from 'chartjs-plugin-datalabels';\n\nimport {MatGridTile} from \"@angular/material/grid-list\";\nimport {FintoolRecomDto, ScoreContainer, StrategyComponent, StrategyService} from \"../strategy.service\";\nimport {dashCaseToCamelCase} from \"@angular/compiler/src/util\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n\n@Component({\n  selector: 'app-findash',\n  templateUrl: './findash.component.html',\n  styleUrls: ['./findash.component.css']\n})\n\nexport class FindashComponent implements OnInit {\n\n  // dirty initializer hack\n  data: FintoolRecomDto = {} as any\n\n  userScoreArr: number[] = []\n  goodRecomStrats: StrategyComponent[] = [];\n  goodStratArrs: number[][] = [];\n\n\n  constructor(private strategySvc: StrategyService, private route: ActivatedRoute, private router: Router) {\n\n  }\n\n  ngOnInit(): void {\n    this.strategySvc.data$.subscribe(\n      resp => {\n        this.data = resp;\n        this.userScoreArr = this.getNumberArray(resp.user_scores)\n        this.goodRecomStrats = this.data.good_recommendation.recommended_components\n        this.extractStrategyScores(this.goodRecomStrats)\n\n        /*\n            DEBUG LOG OUTPUT\n         */\n\n       this.goodRecomStrats.forEach(\n         strat => {\n           console.log(\"strategy: \" + strat.name)\n           console.log(\"has scores: \" + this.getNumberArrayFromStrategy(strat));\n         }\n       )\n      }\n    );\n  }\n\n  extractStrategyScores(scs: StrategyComponent[]) {\n    scs.forEach(\n      strategy => {\n        this.goodStratArrs.push([strategy.time_flexibility, strategy.fin_risk_tolerance, strategy.psy_risk_tolerance, strategy.cog_bias_resistance, strategy.financial_knowledge])\n      }\n    );\n  }\n\n\n  navigateToDiscovery() {\n    this.router.navigateByUrl('/discover')\n  }\n\n  /*\n    Based on: export const radarchartLabels: string[] = ['TimeFlexibility', 'Financial Risk Tolerance', 'Psychological Risk Tolerance', 'Cognitive Bias Resistance', 'Finance Knowledge'];\n   */\n  getNumberArray(sc: ScoreContainer): number[] {\n\n    return [sc.time_flexibility, sc.fin_risk_tolerance, sc.psy_risk_tolerance, sc.cog_bias_resistance, sc.financial_knowledge]\n  }\n  getNumberArrayFromStrategy(strat: StrategyComponent): number[] {\n\n    return [strat.time_flexibility, strat.fin_risk_tolerance, strat.psy_risk_tolerance, strat.cog_bias_resistance, strat.financial_knowledge]\n  }\n}\n","/*\n  type ScoreContainer struct {\n\tFinRiskTolerance  int `json:\"fin_risk_tolerance\"`\n\tPsyRiskTolerance  int `json:\"psy_risk_tolerance\"`\n\tTimeFlexibility   int `json:\"time_flexibility\"`\n\tCogBiasResistance int `json:\"cog_bias_resistance\"`\n\tFinanceKnowledge  int `json:\"finance_knowledge\"`\n}\n */\nimport {ChartData, DefaultDataPoint} from \"chart.js\";\nimport {FintoolRecom, ScoreContainer} from \"./strategy.service\";\n\nexport const radarchartLabels: string[] = ['TimeFlexibility', 'Financial Risk Tolerance', 'Psychological Risk Tolerance', 'Cognitive Bias Resistance', 'Finance Knowledge'];\n\n\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, ReplaySubject} from \"rxjs\";\nimport {catchError, shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionnaireService {\n\n\n  private dataSubject = new ReplaySubject<McQuestionnaire>(1);\n\n  data$: Observable<McQuestionnaire> = this.dataSubject.asObservable();\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n\n\n  getQuestionnaires(): Observable<McQuestionnaire[]> {\n    return this.httpClient.get<McQuestionnaire[]>(\"http://localhost:8080/api/questionnaires/all\")\n  }\n\n  getQuestionnaireList(): Observable<string[]> {\n    return this.httpClient.get<string[]>(\"http://localhost:8080/api/questionnaires\")\n  }\n}\n\nexport class McQuestionnaire {\n\n  constructor(category: string,\n              description: string,\n              questions: McQuestion[]) {\n\n    this.category = category;\n    this.description = description;\n    this.questions = questions;\n  }\n\n  category: string\n  description: string\n  questions: McQuestion[]\n\n}\n\nexport class Metadata {\n  public category: string\n\n\n  constructor(category: string) {\n    this.category = category;\n  }\n}\n\n\nexport class McQuestion {\n\n  public metadata: Metadata\n\n  public answers_to_show: McAnswer[]\n  public question_text: string\n  public chosen_answer_index: number\n\n\n  constructor(metadata: Metadata, answersToShow: McAnswer[], questionText: string, chosenAnswerIndex: number) {\n    this.metadata = metadata;\n    this.answers_to_show = answersToShow;\n    this.question_text = questionText;\n    this.chosen_answer_index = chosenAnswerIndex;\n  }\n\n\n}\n\nexport class McAnswer {\n  public answer_text: string\n  public value: number\n\n\n  constructor(answerText: string, value: number) {\n    this.answer_text = answerText;\n    this.value = value;\n  }\n}\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ChartConfiguration, ChartData, ChartOptions, ChartType, RadarControllerChartOptions} from \"chart.js\";\nimport {radarchartLabels} from \"../ftconstants\";\nimport {FintoolRecomDto, ScoreContainer, StrategyService} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-skillradar',\n  templateUrl: './skillradar.component.html',\n  styleUrls: ['./skillradar.component.css']\n})\nexport class SkillradarComponent implements OnInit, OnChanges {\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log(\"on changes ...\")\n    this.radarChartData = this.initRadarChartData()\n    this.recolor();\n  }\n  @Input() userScores: number[] = [];\n\n  radarChartData: ChartData<'radar'> = {} as any\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n    console.log(\"initializing radar chart data\")\n    this.radarChartData = this.initRadarChartData();\n    this.recolor();\n  }\n\n  public options: ChartOptions = {\n    responsive: true,\n    scales: {\n      radial: {\n        beginAtZero: true,\n        max: 10,\n        min: 0,\n        ticks: {\n          stepSize: 1\n\n        }\n      }\n    }\n  }\n\n  public initRadarChartData(): ChartData<'radar'> {\n    return {\n      labels: radarchartLabels,\n      datasets: [\n        {data: this.userScores, label: 'Your Answers'},\n       // {data: [10,10,10,10,10], hidden: false, showLine: false, label: 'Theoretical Maximum'},\n      ]\n    };\n  }\n\n  public recolor(): void {\n    this.radarChartData.datasets[0].backgroundColor = 'rgba(90, 123, 170, 0.17)'\n    this.radarChartData.datasets[0].borderColor = '#507783'\n  }\n\n  public radarChartType: ChartType = 'radar';\n\n  // events\n  public chartClicked({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n  public chartHovered({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n\n  getNumberArray(sc: ScoreContainer): number[] {\n\n    return [sc.time_flexibility, sc.fin_risk_tolerance, sc.psy_risk_tolerance, sc.cog_bias_resistance, sc.financial_knowledge]\n  }\n\n\n}\n","<mat-card style=\"width: 1500px; height: 800px\">\n  <div fxLayout=\"row\" fxLayoutGap=\"50px\">\n\n    <div fxFlex=\"50\">\n\n      <mat-card>\n        <canvas baseChart [data]=\"radarChartData\" [options]=\"options\" [type]=\"radarChartType\">\n        </canvas>\n      </mat-card>\n    </div>\n\n    <div fxFlex=\"50\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Your Results:</mat-card-title>\n          <mat-card-subtitle>You scored the following average values in these categories:</mat-card-subtitle>\n        </mat-card-header>\n\n        <p>Time & Flexibility: {{this.userScores[0]}}</p>\n        <p>Finance Knowledge: {{this.userScores[4]}}</p>\n        <p>Cognitive Bias Resistance: {{this.userScores[3]}}</p>\n        <p>Financial Risk Tolerance: {{this.userScores[1]}}</p>\n        <p>Psychological Risk Tolerance: {{this.userScores[2]}}</p>\n      </mat-card>\n    </div>\n  </div>\n\n</mat-card>\n","<div>\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>{{ strategy.name}}</mat-card-title>\n    </mat-card-header>\n    <h3>Major advantages of this strategy:</h3>\n    <div>\n      <ul *ngFor=\"let pro of this.strategy.major_pros\">\n        <p>- {{ pro }}</p>\n      </ul>\n    </div>\n    <h3>Major drawbacks of this strategy:</h3>\n    <div>\n      <ul *ngFor=\"let con of this.strategy.major_cons\">\n        <p>- {{ con }}</p>\n      </ul>\n\n    </div>\n\n    <h3>Full Description</h3>\n    {{ strategy.description }}\n  </mat-card>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {StrategyComponent} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-strat-details',\n  templateUrl: './strat-details.component.html',\n  styleUrls: ['./strat-details.component.css']\n})\nexport class StratDetailsComponent implements OnInit {\n\n  @Input() strategy: StrategyComponent = {} as any;\n\n  constructor() {\n  }\n\n\n  ngOnInit(): void {\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {StrategyComponent} from \"../strategy.service\";\n\n@Component({\n  selector: 'app-strat-feedback',\n  templateUrl: './strat-feedback.component.html',\n  styleUrls: ['./strat-feedback.component.css']\n})\nexport class StratFeedbackComponent implements OnInit {\n\n  @Input() strategy: StrategyComponent = {} as any;\n\n  ratingDisplay: number = 2.5;\n  rated: boolean = false;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  onRatingSet(rating: number): void {\n    this.rated = true;\n    this.ratingDisplay = rating;\n  }\n}\n","<mat-card>\n  <mat-card-header>\n    <mat-card-title>Your Feedback for the strategy <br>'{{ strategy.name}}'</mat-card-title>\n    <br>\n    <mat-card-subtitle>Please enter your feedback for this recommendation here</mat-card-subtitle>\n  </mat-card-header>\n\n  <ngx-stars [readonly]=\"false\" [size]=\"4\" [initialStars]=\"2.5\" [color]=\"'#F1E978'\" (ratingOutput)=\"onRatingSet($event)\"></ngx-stars>\n</mat-card>\n","import {Component, Inject, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ChartConfiguration, ChartData, ChartOptions, ChartType} from \"chart.js\";\nimport {radarchartLabels} from \"../ftconstants\";\n\n\n@Component({\n  selector: 'app-stratcompare',\n  templateUrl: './stratcompare.component.html',\n  styleUrls: ['./stratcompare.component.css']\n})\n\n/*\n    This component serves a comparison chart between the user's answers and a given strategy\n    in practice, these strategies are returned from the backend.\n */\nexport class StratcompareComponent implements OnInit, OnChanges {\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log(\"on changes ...\")\n    this.radarChartData = this.initRadarChartData()\n  }\n\n  @Input() userScores: number[] = [];\n  @Input() strategyScores: number[] = [];\n\n  radarChartData: ChartData<'radar'> = {} as any;\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n    this.radarChartData = this.initRadarChartData();\n    this.recolor()\n  }\n\n  // Radar\n  public radarChartOptions: ChartConfiguration['options'] = {\n    responsive: true,\n  };\n\n  public options: ChartOptions = {\n    responsive: true,\n    scales: {\n      radial: {\n        beginAtZero: true,\n        max: 10,\n        min: 0,\n        ticks: {\n          stepSize: 1\n\n        }\n      }\n    }\n  }\n\n  // public options: ChartOptions = {\n  //   responsive: true,\n  //\n  //   scales: {\n  //     ticks: {\n  //       suggestedMin: 0,\n  //       suggestedMax: 10,\n  //     }\n  //   }\n  // };\n\n  /*\n    public radarChartData: ChartData<'radar'> = {\n      labels: radarchartLabels,\n      datasets: [\n        {data: [65, 59, 10, 81, 15], label: 'Series A'},\n        {data: [28, 48, 40, 19, 60], label: 'Series B'},\n      ]\n    };\n   */\n\n  public initRadarChartData(): ChartData<'radar'> {\n    console.log(\"user scores: \" + this.userScores)\n    console.log(\"strategy scores: \" + this.strategyScores)\n\n    return {\n      labels: radarchartLabels,\n      datasets: [\n        {data: this.userScores, label: 'User Answers', spanGaps: true},\n        {data: this.strategyScores, label: 'Strategy Values', spanGaps: true},\n    //    {data: this.refScores, hidden: false, showLine: false, label: 'Theoretical Maximum'},\n      ]\n    }\n  }\n\n  public refScores: number[] = [10, 10, 10, 10, 10]\n\n\n  public recolor(): void {\n    this.radarChartData.datasets[0].backgroundColor = 'rgba(90, 123, 170, 0.17)'\n    this.radarChartData.datasets[0].borderColor = '#507783'\n\n    this.radarChartData.datasets[1].backgroundColor = 'rgba(231, 243, 11, 0.17)'\n    this.radarChartData.datasets[1].borderColor = '#F1E978'\n\n\n  }\n\n  public radarChartType: ChartType = 'radar';\n\n  // events\n  public chartClicked({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n\n  public chartHovered({event, active}: { event: MouseEvent, active: {}[] }): void {\n    console.log(event, active);\n  }\n}\n","<mat-card >\n  <div>\n    <canvas baseChart [data]=\"radarChartData\" [options]=\"options\" [type]=\"radarChartType\">\n    </canvas>\n  </div>\n</mat-card>\n","import {Injectable} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {McQuestionnaire} from \"./questionnaire.service\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StrategyService {\n\n  private _data$: Observable<FintoolRecomDto>;\n\n  private _stratSampleData$: Observable<StrategyComponent[]>\n\n  constructor(private httpClient: HttpClient) {\n\n    this._data$ = new Observable<any>();\n    this._stratSampleData$ = new Observable<any>();\n  }\n\n  postFilledQuestionnaires(questionnaires: McQuestionnaire[]): Observable<FintoolRecomDto> {\n    this._data$ = this.httpClient.post<FintoolRecomDto>(\"http://localhost:8080/api/questionnaires/submit\", questionnaires)\n    return this._data$\n  }\n\n  getRandomStrategySample(): Observable<StrategyComponent[]> {\n    this._stratSampleData$ = this.httpClient.get<StrategyComponent[]>(\"http://localhost:8080/api/random\")\n    return this._stratSampleData$\n  }\n\n  get data$(): Observable<FintoolRecomDto> {\n    return this._data$;\n  }\n\n  set data$(value: Observable<FintoolRecomDto>) {\n    this._data$ = value;\n  }\n\n\n  get stratSampleData$(): Observable<StrategyComponent[]> {\n    return this._stratSampleData$;\n  }\n\n  set stratSampleData$(value: Observable<StrategyComponent[]>) {\n    this._stratSampleData$ = value;\n  }\n}\n\n/*\n    The DTO that is returned from backend, it encapsulates a recommendation and an id\n */\nexport class FintoolRecomDto {\n\n  constructor(good_recommendation: FintoolRecom,\n              bad_recommendation: FintoolRecom,\n              id: string,\n              user_scores: ScoreContainer\n  ) {\n    this.good_recommendation = good_recommendation;\n    this.bad_recommendation = bad_recommendation;\n    this.id = id;\n    this.user_scores = user_scores\n  }\n\n  id: string\n  good_recommendation: FintoolRecom\n  bad_recommendation: FintoolRecom\n  user_scores: ScoreContainer\n}\n\n/*\n    The actual recommendation, encapsulating the components#\n    BAsed on:\n    type FintoolRecom struct {\n\tRecommendedComponents [3]StrategyComponent `json:\"recommended_components\"`\n\tWildcardComponent     StrategyComponent    `json:\"wildcard_component\"`\n}\n\n */\nexport class FintoolRecom {\n\n  constructor(recommended_components: StrategyComponent[], wildcard_component: StrategyComponent) {\n    this.recommended_components = recommended_components;\n    this.wildcard_component = wildcard_component;\n  }\n\n  recommended_components: StrategyComponent[]\n  wildcard_component: StrategyComponent\n}\n\n/*\n    An actual personal finance strategy component, this encapsulates the raw numerical category stores\n */\nexport class StrategyComponent {\n\n  time_flexibility: number\n  fin_risk_tolerance: number\n  psy_risk_tolerance: number\n  financial_knowledge: number\n  cog_bias_resistance: number\n\n  score_container: ScoreContainer\n  description: string;\n  name: string;\n\n  links: string[] = [];\n  tags: string[] = [];\n  major_pros: string[] = [];\n  major_cons: string[] = [];\n\n  constructor(description: string,\n              name: string,\n              time_flexibility: number,\n              fin_risk_tolerance: number,\n              psy_risk_tolerance: number,\n              financial_knowledge: number,\n              cog_bias_resistance: number,\n              links: string[],\n              tags: string[],\n              major_pros: string[],\n              major_cons: string[],\n  ) {\n    this.description = description;\n\n\n    this.time_flexibility = time_flexibility;\n    this.fin_risk_tolerance = fin_risk_tolerance;\n    this.psy_risk_tolerance = psy_risk_tolerance;\n    this.financial_knowledge = financial_knowledge;\n    this.cog_bias_resistance = cog_bias_resistance;\n    this.name = name;\n    this.links = links;\n    this.tags = tags;\n    this.major_cons = major_cons;\n    this.major_pros = major_pros;\n\n    this.score_container = new ScoreContainer(\n      this.time_flexibility,\n      this.fin_risk_tolerance,\n      this.psy_risk_tolerance,\n      this.financial_knowledge,\n      this.cog_bias_resistance,\n    )\n  }\n}\n\n/*\n  type ScoreContainer struct {\n\tFinRiskTolerance  int `json:\"fin_risk_tolerance\"`\n\tPsyRiskTolerance  int `json:\"psy_risk_tolerance\"`\n\tTimeFlexibility   int `json:\"time_flexibility\"`\n\tCogBiasResistance int `json:\"cog_bias_resistance\"`\n\tFinanceKnowledge  int `json:\"finance_knowledge\"`\n}\n */\nexport class ScoreContainer {\n  time_flexibility: number\n  fin_risk_tolerance: number\n  psy_risk_tolerance: number\n  financial_knowledge: number\n  cog_bias_resistance: number\n\n\n  constructor(time_flexibility: number,\n              fin_risk_tolerance: number,\n              psy_risk_tolerance: number,\n              financial_knowledge: number,\n              cog_bias_resistance: number) {\n    this.time_flexibility = time_flexibility;\n    this.fin_risk_tolerance = fin_risk_tolerance;\n    this.psy_risk_tolerance = psy_risk_tolerance;\n    this.financial_knowledge = financial_knowledge;\n    this.cog_bias_resistance = cog_bias_resistance;\n  }\n\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}